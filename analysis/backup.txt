## Raw data from CSV files

```{r load CSV files}
csvs <- list.files(
  path=path_prefix, 
  pattern="genthat-traces.csv", 
  full.names=TRUE, 
  recursive=TRUE
)

read_csv_checked <- function(...) {
  tryCatch(read_csv(...), error=function(x) {
    message(..1, ": error: ", e$message)
  }, warning=function(e) {
    message(..1, ": warning: ", e$message)
  })
}

# the header:
# package,type,tag,filename,n_traces,n_complete,n_entry,n_error,n_failures,status,running_time
raw <- pblapply(csvs, read_csv_checked, col_types=cols_only(
  package="c",
  type="c",
  tag="c",
  filename="c",
  n_traces="i",
  n_complete="i",
  n_entry="i",
  n_failures="i",
  status="i",
  running_time="d"
))

names(raw) <- csvs
```

## Cleaning up

```{r create data frame}
path_split <- str_match(csvs, str_c(path_prefix, "/1/[^/]+/2/([^/]+)/3/([^/]+)/.*"))

data <- bind_rows(raw, .id="csv") %>%
  mutate(
    n_traces=ifelse(is.na(n_traces), 0, n_traces), 
    n_complete=ifelse(is.na(n_complete), 0, n_complete), 
    n_entry=ifelse(is.na(n_entry), 0, n_entry), 
    n_failures=ifelse(is.na(n_failures), 0, n_failures)
  ) %>%
  left_join(
    data_frame(
      csv=path_split[,1],
      decorator=path_split[,2],
      tracer=path_split[,3]
    ),
    by="csv"
  )
```

```{r}
if (data %>% filter(decorator=="trycatch") %>% nrow() != 0) {
  stop("This analysis does not support trycatch decorator")
}
```

The following should be an empty data frame
```{r}
data %>% 
  mutate(CHK=n_traces - n_complete - n_entry - n_failures) %>% 
  filter(CHK != 0)
```

## Summary of the run of the experiment

### Execution



### Result

```{r fig.height=12}
compute_status_detail <- function(status) {
  status <- ifelse(is.na(status), -256, status)
  
  if (any(status != 0)) {
    str_c(sum(status == 0), length(status), sep="/")
  } else {
    ""
  }
}

compute_status_code <- function(status, n_complete) {
  status <- ifelse(is.na(status), -256, status)
  
  if (all(status == -256)) "Nothing to run"
  else if (all(status == 0) && n_complete == 0) "No complete traces"
  else if (all(status == 0)) "OK"
  else "Run errors"
}

classified_runs <- 
  data %>%
    filter(tracer=="set", decorator=="onexit") %>%
    group_by(package, type) %>%
    summarise(
      status_code=compute_status_code(status, n_complete),
      status_detail=compute_status_detail(status)
    )

  classified_runs %>%
    filter(status_code == "Run errors") %>%
    ggplot(aes(x=type, y=package, label=status_detail, shape=status_code, color=status_code)) +
    geom_text() +
    geom_point(data=classified_runs %>% filter(status_code != "Run errors")) +
    scale_color_manual(guide=FALSE, values=c("Nothing to run"="gray", "No complete traces"="orange", "OK"="green", "Run errors"="red")) +
    labs(
      title="Summary of the runs", 
      x="Type", 
      y="Package",
      shape="Result"
    )
```

- In total we have `r length(unique(data$package))` packages.
- For `r data %>% filter(decorator=="onexit", tracer=="set") %>% group_by(package) %>% summarise(n_complete=sum(n_complete)) %>% filter(n_complete > 0) %>% nrow()` project we have some complete traces (i.e. traces from which we can generate tests)

### Remove data that do no have any traces

```{r}
data <- data %>% filter(n_traces > 0)
```

# Data Overview

```{r}
data_stats %>% 
  summarise(
    n_projects=n_distinct(package), 
    decorators=str_c(unique(decorator), collapse = ", "),
    tracers=str_c(unique(tracer), collapse = ", "),
    type=str_c(unique(type), collapse = ", ")
  ) %>%
  gather(
    key=n,
    value=value
  ) %>%
  bind_rows(
  data_n %>% 
    group_by(n) %>%
    summarise(value=sum(value)) %>%
    mutate(value=as.character(value))
  ) %>%
  left_join(COLS, by=c("n"="column")) %>%
  select(n, value, description)
```

# Number of traces

## The number of unique complete traces [onexit, set]

These are the traces that can be used to genetate tests.

```{r fig.height=12}
data_stats %>%
  filter(decorator == "onexit", tracer == "set") %>%
  group_by(package) %>%
  summarise(traces=sum(n_complete)) %>%
  mutate(package=factor(package, levels=package[order(traces)])) %>%
  ggplot(aes(x=package, y=traces)) +
  geom_col() +
  coord_flip() +
  scale_y_log10() + 
  labs(
    title="Number of traces per decorator, tracer and type",
    x="Package",
    y="Number of traces (log)"
  )
```


### Details

```{r fig.height=10}
data_n %>%
  group_by(decorator, tracer, type, n) %>%
  summarise(value=sum(value)) %>%
  ggplot(aes(x=type, y=value, fill=n, label=value)) +
  geom_col(position="dodge") +
  geom_text(size=2, hjust=0, vjust=.5, position = position_dodge(0.9), angle=90) +
  scale_y_log10() + 
  facet_grid(decorator ~ tracer) + 
  labs(
    title="Overview of the number of captured traces",
    x="Execution type",
    y="Number of traces (log)",
    fill="Trace type"
  )
```

```{r fig.width=13}
data_n %>%
  filter(n == "n_traces", tracer == "sequence") %>%
  group_by(package, decorator, n) %>%
  summarise(value=sum(value)) %>%
  ggplot(aes(x=package, y=value, fill=decorator)) +
  geom_col(position="dodge") +
  scale_y_log10() + 
  labs(
    title="Number of traces per package with sequence tracer",
    x="Package",
    y="Number of traces (log)",
    fill="Decorator"
  ) + 
  theme(axis.text.x=element_text(angle=90, hjust=1))
```

## Number of traces per package (onexit, set)

```{r fig.height=10}
data_n %>%
  filter(n != "n_traces", decorator == "onexit", tracer == "set") %>%
  group_by(package, n) %>%
  summarise(value=sum(value)) %>%
  ggplot(aes(x=package, y=value, fill=n)) +
  geom_col() +
  coord_flip() +
  scale_y_log10() + 
  labs(
    title="Number of traces per decorator, tracer and type",
    x="type",
    y="number of traces (log)",
    fill="trace type"
  )
```

## Efficiency

```{r fig.height=10}
data_stats %>%
  filter(decorator == "onexit", tracer == "set") %>%
  group_by(package) %>%
  summarise(n_traces=sum(n_traces), n_complete=sum(n_complete)) %>%
  mutate(ratio=1-n_complete/n_traces) %>%
  ggplot(aes(x=package, y=ratio)) +
  geom_col() +
  coord_flip() +
  labs(
    title="1 - n_complete / n_traces for onexit set",
    subtitle="How many calls did we miss?",
    x="Package",
    y="Ratio"
  ) +
  geom_hline(yintercept=.05, color="red")
```

```{r fig.height=10}
data_stats %>%
  filter(tracer == "sequence", decorator=="onexit") %>%
  select(package, n_complete) %>%
  full_join(
    data_stats %>%
    filter(tracer == "sequence", decorator=="count-exit") %>%
    select(package, n_entry)
  ) %>%
  group_by(package) %>%
  summarise(n_complete=sum(n_complete), n_entry=sum(n_entry)) %>%
  mutate(ratio=1 - n_complete / n_entry) %>%
  ggplot(aes(x=package, y=ratio)) +
  geom_col() +
  coord_flip() +
  labs(
    title="1 - onexit n_complete / exit-count n_traces for sequence",
    subtitle="How many possible calls did we missed?",
    x="Package",
    y="Ratio"
  ) +
  geom_hline(yintercept=.05, color="red")
```

```{r fig.width=13}
data_stats %>%
  filter(decorator == "onexit", tracer == "set") %>%
  group_by(package, type) %>%
  summarise(traces=sum(n_complete)) %>%
  spread(type, traces) %>%
  mutate(
    all=examples+tests+vignettes,
    examples=examples/all,
    tests=tests/all,
    vignettes=vignettes/all
  ) %>%
  select(-all) %>%
  gather(n, value, examples, tests, vignettes) %>%
  ggplot(aes(x=package, y=value, fill=n)) +
  geom_col(position="dodge") +
  theme(axis.text.x=element_text(angle=90, hjust=1)) +
  labs(
    title="Run type traces ratio per project [onexit, set]",
    x="Package",
    y="Ratio",
    fill="Run type"
  )
```

### Failures

We run each examples, tests and vignettes. The examples and vignettes are run by extracting the embedded R code from each example Rd file and each vignette. The same is for tests, in which case, we look for any R file in the tests directory. In the case of a testing framework such as testthat, there will be only one execution (of the `tests/testthat.R`).

The following plot shows how many failures were encountered, i.e., how many times running R script exited with non-zero status. The details (stderr) are in the appendix.

```{r missing, fig.height=12, fig.width=12}
failures <- data_stats %>%
  remove_empty_rows() %>% 
  filter(status != 0)

failures %>%
  select(package, decorator, tracer, type) %>%
  transmute(package, type, config=str_c(decorator, tracer, sep=" ")) %>%
  ggplot(aes(config, type)) +
  geom_point() +
  facet_grid(package ~ ., scales = "free", space = "free") +
  theme(strip.text.y = element_text(angle = 0))
```

```{r failure with no data, fig.width=13}
complete_failures <-
  data_stats %>%
    remove_empty_rows() %>%
    filter(status != 0, n_traces == 0)

complete_failures %>%
    transmute(package, type, config=str_c(decorator, tracer, sep=" ")) %>%
    ggplot(aes(config, type)) +
    geom_point() +
    facet_grid(package ~ ., scales = "free", space = "free") +
    theme(strip.text.y = element_text(angle = 0))
```

# Appendix - Complete Failures

```{r log files, results='asis'}
details <- 
  complete_failures %>% 
    left_join(data, by=c("package", "decorator", "tracer", "type")) %>%
    select(package, decorator, tracer, type, csv) %>%
    mutate(stderr=sapply(file.path(dirname(csv), "stderr"), read_file))

for (i in 1:nrow(details)) {
  cat(
    "<b><code>", details$csv[i], ":</code></b>", "<br/>", 
    "<pre><code>", details$stderr[i], "</pre></code>"
  )
}
```


# Appendix - Raw Data

```{r}
DT::datatable(data)
```
